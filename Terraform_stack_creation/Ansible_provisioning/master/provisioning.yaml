- name: Retrieve and set Terraform outputs
  hosts: localhost
  tasks:
    - name: Run terraform output for all outputs
      command: terraform output -json
      args:
        chdir: "{{ playbook_dir }}/../.."
      register: terraform_outputs
      no_log: true

    - name: Set facts with the extracted outputs
      set_fact:
        vpc_id: "{{ (terraform_outputs.stdout | from_json).vpc_id.value }}"
        terraform_role_arn: "{{ (terraform_outputs.stdout | from_json).terraform_role_arn.value }}"
        public_subnet_ids: "{{ (terraform_outputs.stdout | from_json).public_subnet_ids.value | join(',') }}"
        efs_id: "{{ (terraform_outputs.stdout | from_json).efs_id.value }}"
        git_token: "{{ (terraform_outputs.stdout | from_json).git_token.value }}"
      no_log: true

- name: General provisioning for all hosts
  hosts: all
  become: yes
  tasks:

    - name: Copy .bashrc template to remote machine
      template:
        src: template_bashrc
        dest: /home/ubuntu/.bashrc
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Update .bashrc with Terraform outputs
      lineinfile:
        path: /home/ubuntu/.bashrc
        create: yes
        line: |
          export VPC_ID="{{ hostvars['localhost'].vpc_id }}"
          export TERRAFORM_ROLE_ARN="{{ hostvars['localhost'].terraform_role_arn }}"
          export PUBLIC_SUBNET_IDS="{{ hostvars['localhost'].public_subnet_ids }}"
          export EFS_ID="{{ hostvars['localhost'].efs_id }}"
          export GITHUB_TOKEN="{{ hostvars['localhost'].git_token }}"
      no_log: true

    - name: Update apt cache
      apt:
        update_cache: yes
      register: update_cache

    - name: zip install
      apt:
        name:
          - unzip
        state: present
        update_cache: yes

    - name: Install ca-certificates curl gnupg
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
        state: present
        update_cache: yes

    - name: Ensure /etc/apt/keyrings directory exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.gpg
        mode: '0644'

    - name: Convert Docker GPG key to dearmored format
      command: gpg --dearmor -o /etc/apt/keyrings/docker.gpg /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Set permissions on the dearmored Docker GPG key
      file:
        path: /etc/apt/keyrings/docker.gpg
        mode: '0644'

    - name: Add repo to Apt sources
      command: echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

    - name: Add Docker GPG key and add Docker repository
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.gpg
        mode: '0644'

    - name: Add Docker GPG key and convert to dearmored format
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      args:
        creates: /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Add Docker GPG key, convert to dearmored format, and add Docker repository
      shell: >
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" |
        tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        creates: /etc/apt/sources.list.d/docker.list

    - name: Update apt cache
      apt:
        update_cache: yes
      register: update_cache

    - name: Install docker dependencies
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Download cri-dockerd
      get_url:
        url: https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.9/cri-dockerd_0.3.9.3-0.ubuntu-bionic_amd64.deb
        dest: /tmp/cri-dockerd_0.3.9.3-0.ubuntu-bionic_amd64.deb

    - name: Install CRI
      command: dpkg -i /tmp/cri-dockerd_0.3.9.3-0.ubuntu-bionic_amd64.deb

    - name: Start cri-docker
      service:
        name: cri-docker
        state: started
        enabled: yes

    - name: Start docker
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add Kubernetes GPG key and repository
      shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes GPG key and repository2
      shell: >
        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' |
        tee /etc/apt/sources.list.d/kubernetes.list
      args:
        creates: /etc/apt/sources.list.d/kubernetes.list

    - name: Update apt cache
      apt:
        update_cache: yes
      register: update_cache

    - name: Install kubernetes
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes

    - name: Hold kubelet, kubeadm, kubectl packages
      shell: apt-mark hold kubelet kubeadm kubectl

    - name: Install NFS
      apt:
        name:
          - nfs-common
        state: present

- name: Install Kubemaster
  hosts: master
  become: yes
  tasks:
    - name: Initialize Kubernetes control plane with dockerd
      shell: sudo kubeadm init --cri-socket unix:///var/run/cri-dockerd.sock

    - name: Ensure .kube directory exists
      file:
        path: "/home/ubuntu/.kube"
        state: directory
        mode: '0755'

    - name: Copy admin.conf to .kube/config
      command: cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
      args:
        creates: "/home/ubuntu/.kube/config"

    - name: Ensure ownership of .kube/config
      shell: chown ubuntu:ubuntu /home/ubuntu/.kube/config

    - name: Restart kubelet service
      service:
        name: kubelet
        state: restarted

    - name: Enable kubelet service
      service:
        name: kubelet
        enabled: yes

    - name: Download .kube/config
      fetch:
        src: /home/ubuntu/.kube/config
        dest: /tmp/config
        flat: yes

    - name: Generate kubeadm join command
      command: sudo kubeadm token create --print-join-command
      register: join_command

    - name: Save join command to file
      copy:
        content: "{{ join_command.stdout }}"
        dest: /tmp/token

    - name: Download token
      fetch:
        src: /tmp/token
        dest: /tmp/token
        flat: yes

    - name: Apply Calico YAML
      ansible.builtin.command:
        cmd: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.2/manifests/calico.yaml
      become: yes
      become_user: ubuntu

- name: Install Kubeworkers
  hosts: worker
  become: yes
  become_user: ubuntu
  tasks:
    - name: Delete dockerd
      shell: sudo rm /var/run/containerd/containerd.sock

    - name: Create file
      shell: mkdir -p /home/ubuntu/.kube/

    - name: Copy .kube/config
      copy:
        src: /tmp/config
        dest: /home/ubuntu/.kube/config
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Copy token
      copy:
        src: /tmp/token
        dest: /home/ubuntu/token

    - name: Connect NODES
      shell: sudo $(cat /home/ubuntu/token | head -n1)

- name: Install deployments
  hosts: all
  become: yes
  tasks:

    - name: Download HELM
      get_url:
        url: https://get.helm.sh/helm-v3.14.0-rc.1-linux-amd64.tar.gz
        dest: /tmp/helm-v3.14.0-rc.1-linux-amd64.tar.gz
        mode: '0644'

    - name: Extract HELM
      command: tar -xzvf /tmp/helm-v3.14.0-rc.1-linux-amd64.tar.gz -C /tmp/

    - name: Move HELM binary to /usr/local/bin
      command: mv /tmp/linux-amd64/helm /usr/local/bin/helm
      args:
        creates: /usr/local/bin/helm

    - name: Ensure /usr/local/bin/helm is executable
      file:
        path: /usr/local/bin/helm
        mode: '0755'
        owner: root
        group: root

- name: Patch Kubernetes node
  hosts: all
  become: yes
  become_user: ubuntu
  tasks:
    - name: Get IMDSv2 token
      shell: |
        curl -X PUT "http://169.254.169.254/latest/api/token" \
        -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"
      register: imds_token

    - name: Set token fact
      set_fact:
        token: "{{ imds_token.stdout }}"

    - name: Get AWS region
      shell: |
        curl -H "X-aws-ec2-metadata-token: {{ token }}" \
        http://169.254.169.254/latest/meta-data/placement/region
      register: aws_region

    - name: Set region fact
      set_fact:
        region: "{{ aws_region.stdout }}"

    - name: Get AWS instance ID
      shell: |
        curl -H "X-aws-ec2-metadata-token: {{ token }}" \
        http://169.254.169.254/latest/meta-data/instance-id
      register: aws_instance_id

    - name: Set instance ID fact
      set_fact:
        instance_id: "{{ aws_instance_id.stdout }}"

    - name: Get local IP
      shell: |
        curl -H "X-aws-ec2-metadata-token: {{ token }}" \
        http://169.254.169.254/latest/meta-data/local-ipv4
      register: local_ip

    - name: Format local IP
      set_fact:
        local_ip_formatted: "{{ local_ip.stdout | replace('.', '-') }}"

    - name: Debug formatted IP
      debug:
        msg: "Formatted local IP is {{ local_ip_formatted }}"

    - name: Patch Kubernetes node
      shell: |
        kubectl patch node "ip-{{ local_ip_formatted }}" -p '{"spec":{"providerID":"aws:///{{ region }}/{{ instance_id }}"}}'
      register: kubectl_patch

    - name: Display patch result
      debug:
        msg: "{{ kubectl_patch.stdout }}"

- name: Download Git Repo
  hosts: all
  become: yes
  become_user: ubuntu
  tasks:

    - name: Clone the KubeServices repository
      ansible.builtin.git:
        repo: https://github.com/fanfanafankianki/KubeServices
        dest: /home/ubuntu/KubeServices
        version: main

    - name: Checkout HelmPromGraf branch
      ansible.builtin.command:
        cmd: git checkout HelmPromGraf
        chdir: /home/ubuntu/KubeServices

- name: Perform Kubernetes and Flux setup
  hosts: master
  become: yes
  become_user: ubuntu
  tasks:

    - name: Run envsubst on deployment file and replace original
      shell: |
        envsubst < /home/ubuntu/KubeServices/Kubernetes_Yamls/NFS_configuration/7-deployment_prometheus.yaml > /home/ubuntu/KubeServices/Kubernetes_Yamls/NFS_configuration/7-deployment_prometheus.yaml.tmp
        envsubst < /home/ubuntu/KubeServices/Kubernetes_Yamls/7-ingress.yaml > /home/ubuntu/KubeServices/Kubernetes_Yamls/7-ingress.yaml.tmp
        envsubst < /home/ubuntu/KubeServices/Flux_configuration/aws_load_balancer_controller_HR.yaml > /home/ubuntu/KubeServices/Flux_configuration/aws_load_balancer_controller_HR.yaml.tmp
        mv /home/ubuntu/KubeServices/Kubernetes_Yamls/NFS_configuration/7-deployment_prometheus.yaml.tmp /home/ubuntu/KubeServices/Kubernetes_Yamls/NFS_configuration/7-deployment_prometheus.yaml
        mv /home/ubuntu/KubeServices/Kubernetes_Yamls/7-ingress.yaml.tmp /home/ubuntu/KubeServices/Kubernetes_Yamls/7-ingress.yaml
        mv /home/ubuntu/KubeServices/Flux_configuration/aws_load_balancer_controller_HR.yaml.tmp /home/ubuntu/KubeServices/Flux_configuration/aws_load_balancer_controller_HR.yaml

    - name: Apply Configuration Yamls
      ansible.builtin.command:
        cmd: kubectl apply -f /home/ubuntu/KubeServices/Kubernetes_Yamls/.
        chdir: /home/ubuntu/KubeServices/Kubernetes_Yamls

    - name: Apply NFS Configuration Yamls
      ansible.builtin.command:
        cmd: kubectl apply -f /home/ubuntu/KubeServices/Kubernetes_Yamls/NFS_configuration/.
        chdir: /home/ubuntu/KubeServices/Kubernetes_Yamls/NFS_configuration

    - name: Install Flux
      ansible.builtin.shell: |
        curl -s https://fluxcd.io/install.sh | sudo bash
      args:
        chdir: /home/ubuntu/KubeServices/Flux_configuration

    - name: Export GitHub token and bootstrap Flux
      ansible.builtin.shell: |
        flux bootstrap github --owner=fanfanafankianki --repository=KubeServices --branch=HelmPromGraf --path=./Flux_configuration --personal
      ignore_errors: true

    - name: Apply load balancer controller
      ansible.builtin.shell: |
        kubectl apply -f aws_load_balancer_controller_HR.yaml
        sleep 30
      args:
        chdir: /home/ubuntu/KubeServices/Flux_configuration

    - name: Apply rest of HRs
      ansible.builtin.shell: |
        kubectl apply -f .
      args:
        chdir: /home/ubuntu/KubeServices/Flux_configuration

    - name: Add Bitnami Helm repository
      ansible.builtin.command:
        cmd: helm repo add bitnami https://charts.bitnami.com/bitnami

    - name: Add EKS Helm repository
      ansible.builtin.command:
        cmd: helm repo add eks https://aws.github.io/eks-charts

    - name: Update Helm repositories
      ansible.builtin.command:
        cmd: helm repo update
